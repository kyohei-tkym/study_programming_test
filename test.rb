# 1　4乗的ガウス
count = 1
sum = 0
while count <= 64
  sum += count**4
  count += 1
end
puts sum

# 2　1234567890の正の約数のうち、5000000以下のものを全て足し合わせたときの和を求めてください
def divisor_sum(num, limit)
    (1..limit).select{ |i| num % i == 0 }.sum
end
puts divisor_sum(1234567890, 5000000)

# 3 1から20000までの数字の中で、３の倍数と３のつく数字の和
def aboutA_sum(limit)
    (1..limit).select{ |num| num % 3 == 0 || num.to_s.include?("3") }.sum
end
puts aboutA_sum(20000)

# 4 円周率に潜む2桁数字
def twopear
    s = "141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669405132"
    n = 2
    s.scan(/.[1,#{n}]/)
end
puts twopear.max_by {|x| twopear.count(x)}